<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yangy学习记录</title>
  <icon>https://www.gravatar.com/avatar/35e3ef6b8ab6c525945ed9087abede48</icon>
  
  <link href="http://18837176143.github.io/atom.xml" rel="self"/>
  
  <link href="http://18837176143.github.io/"/>
  <updated>2020-08-18T01:09:41.944Z</updated>
  <id>http://18837176143.github.io/</id>
  
  <author>
    <name>yangy</name>
    <email>429306107@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://18837176143.github.io/2020/08/18/%E5%88%A9%E7%94%A8Stream%E5%92%8CLamda%E5%AE%8C%E6%88%90%E8%A1%A8%E7%9A%84%E8%87%AA%E8%BF%9E%E6%8E%A5%E7%94%9F%E6%88%90%E5%A4%9A%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://18837176143.github.io/2020/08/18/%E5%88%A9%E7%94%A8Stream%E5%92%8CLamda%E5%AE%8C%E6%88%90%E8%A1%A8%E7%9A%84%E8%87%AA%E8%BF%9E%E6%8E%A5%E7%94%9F%E6%88%90%E5%A4%9A%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</id>
    <published>2020-08-18T01:06:52.321Z</published>
    <updated>2020-08-18T01:09:41.944Z</updated>
    
    <content type="html"><![CDATA[<p>title: Stream和Lamda操作<br>  ** 先获取一级目录**</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//查询所有,PmsCategory和pmsCategroyService都是已经定义好的</span>   <span class="token comment" spellcheck="true">//实体类和接口</span>   List<span class="token operator">&lt;</span>PmsCategory<span class="token operator">></span>list<span class="token operator">=</span>pmsCategoryService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//通过流和Lamda过滤</span>   List<span class="token operator">&lt;</span>PmsCategory<span class="token operator">></span>firstList<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//过滤所有父Id为0的对象，既一级目录</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>pmcategory<span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                          <span class="token keyword">return</span> pmscategory<span class="token punctuation">.</span>getParentId<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>pmscategory<span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        pmsCategory<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span><span class="token function">createChildren</span><span class="token punctuation">(</span>pmsCategory<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> pmsCategory<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> <strong>编写一个递归实现生成多级子目录</strong></p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>PmsCategory<span class="token operator">></span> <span class="token function">createChildren</span><span class="token punctuation">(</span>PmsCategory pm<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>PmsCategory<span class="token operator">></span> pms<span class="token punctuation">)</span><span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>PmsCategory<span class="token operator">></span>pc<span class="token operator">=</span>pms<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//过滤出所有父Id等于pmId的对象，即子目录</span>                          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                           item<span class="token punctuation">.</span>getParentId<span class="token operator">==</span>pm<span class="token punctuation">.</span>getParentId<span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">//递归实现子目录下子目录</span>                                 item<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span><span class="token function">createChildren</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>pms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token keyword">return</span> item<span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">//转为List集合</span>                         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> pc<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;title: Stream和Lamda操作&lt;br&gt;  ** 先获取一级目录**&lt;/p&gt;
&lt;pre class=&quot; language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;   &lt;span class=&quot;token comment&quot; spellc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://18837176143.github.io/2020/08/16/hello-world/"/>
    <id>http://18837176143.github.io/2020/08/16/hello-world/</id>
    <published>2020-08-16T11:44:13.091Z</published>
    <updated>2020-08-17T04:18:53.464Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
